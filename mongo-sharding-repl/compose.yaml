name: mongo-sharding-repl
services:
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27017"
      MONGODB_DATABASE_NAME: "somedb"
    networks:
      app-network:

  #сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    expose:
      - "27017"
    networks:
      app-network:
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард 
  shard1_1:
    image: mongo:latest
    container_name: shard1_1
    restart: always
    expose:
      - "27017"
    networks:
      app-network:
    volumes:
      - shard1_1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_2:
    image: mongo:latest
    container_name: shard1_2
    restart: always
    expose:
      - "27017"
    networks:
      app-network:
    volumes:
      - shard1_2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_3:
    image: mongo:latest
    container_name: shard1_3
    restart: always
    expose:
      - "27017"
    networks:
      app-network:
    volumes:
      - shard1_3-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард 
  shard2_1:
    image: mongo:latest
    container_name: shard2_1
    restart: always
    expose:
      - "27017"
    networks:
      app-network:
    volumes:
      - shard2_1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_2:
    image: mongo:latest
    container_name: shard2_2
    restart: always
    expose:
      - "27017"
    networks:
      app-network:
    volumes:
      - shard2_2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2_3:
    image: mongo:latest
    container_name: shard2_3
    restart: always
    expose:
      - "27017"
    networks:
      app-network:
    volumes:
      - shard2_3-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #deployment
  mongoclient:
    image: mongo
    depends_on:
      - configSrv
      - shard1_1
      - shard1_2
      - shard1_3
      - shard2_1
      - shard2_2
      - shard2_3
      - mongos_router
    volumes:
      - ./scripts:/scripts
    entrypoint:
      - /scripts/initiate_cluster.sh
    networks:
      app-network:

networks:
  app-network:

volumes:
  config-data:
  shard1_1-data:
  shard1_2-data:
  shard1_3-data:
  shard2_1-data:
  shard2_2-data:
  shard2_3-data: